using NUnit.Framework;
using OpenQA.Selenium;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SauceDemo.Hooks
{
    [Binding]
    public class Hooks
    {
        public static IWebDriver Driver;

        [BeforeScenario]
        public void BeforeScenario()
        {
            var browser = Environment.GetEnvironmentVariable("TEST_BROWSER") ?? "chrome";
            var headless = (Environment.GetEnvironmentVariable("HEADLESS") ?? "true") == "true";

            Driver = WebDriverFactory.CreateDriver(browser, headless);
        }

        [AfterStep]
        public void AfterStep()
        {
            var ctx = ScenarioContext.Current;
            if (ctx.TestError != null)
            {
                try
                {
                    var screenshot = ((ITakesScreenshot)Driver).GetScreenshot();
                    var dir = Path.Combine(Directory.GetCurrentDirectory(), "TestResults", "Screenshots");
                    Directory.CreateDirectory(dir);
                    var file = Path.Combine(dir, $"{SanitizeFileName(ctx.ScenarioInfo.Title)}_{DateTime.Now:yyyyMMdd_HHmmss}.png");
                    screenshot.SaveAsFile(file, ScreenShotImageFormat.Png);
                    TestContext.AddTestAttachment(file, "Failure screenshot");
                    Console.WriteLine($"Screenshot saved: {file}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Failed to capture screenshot: " + ex);
                }
            }
        }

        [AfterScenario]
        public void AfterScenario()
        {
            try
            {
                Driver?.Quit();
                Driver?.Dispose();
            }
            catch { /* best-effort cleanup */ }
        }

        private string SanitizeFileName(string name)
        {
            foreach (var c in Path.GetInvalidFileNameChars()) name = name.Replace(c, '_');
            return name;
        }
    }
}
